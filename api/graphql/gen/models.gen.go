// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
)

type ErrorPayload struct {
	ErrorCode int32   `json:"errorCode"`
	Message   *string `json:"message,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type SendConfirmationCodeInput struct {
	Method    DeliveryMethod `json:"method"`
	Recipient string         `json:"recipient"`
}

type VerifyConfirmationCodeInput struct {
	Recipient string `json:"recipient"`
	Code      string `json:"code"`
}

type DeliveryMethod string

const (
	DeliveryMethodEmail DeliveryMethod = "EMAIL"
)

var AllDeliveryMethod = []DeliveryMethod{
	DeliveryMethodEmail,
}

func (e DeliveryMethod) IsValid() bool {
	switch e {
	case DeliveryMethodEmail:
		return true
	}
	return false
}

func (e DeliveryMethod) String() string {
	return string(e)
}

func (e *DeliveryMethod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryMethod", str)
	}
	return nil
}

func (e DeliveryMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

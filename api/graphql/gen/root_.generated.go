// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	RequirePermission func(ctx context.Context, obj any, next graphql.Resolver, permission string) (res any, err error)
}

type ComplexityRoot struct {
	Mutation struct {
		ProcessFirebaseAuth    func(childComplexity int, input ProcessFirebaseAuthInput) int
		SecurityImage          func(childComplexity int, input SecurityImageInput) int
		SendConfirmationCode   func(childComplexity int, input SendConfirmationCodeInput) int
		VerifyConfirmationCode func(childComplexity int, input VerifyConfirmationCodeInput) int
	}

	Query struct {
		Dummy func(childComplexity int) int
	}

	SecurityImagePayload struct {
		Image  func(childComplexity int) int
		Phrase func(childComplexity int) int
	}

	VoidPayload struct {
		Ok func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.processFirebaseAuth":
		if e.complexity.Mutation.ProcessFirebaseAuth == nil {
			break
		}

		args, err := ec.field_Mutation_processFirebaseAuth_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ProcessFirebaseAuth(childComplexity, args["input"].(ProcessFirebaseAuthInput)), true

	case "Mutation.securityImage":
		if e.complexity.Mutation.SecurityImage == nil {
			break
		}

		args, err := ec.field_Mutation_securityImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SecurityImage(childComplexity, args["input"].(SecurityImageInput)), true

	case "Mutation.sendConfirmationCode":
		if e.complexity.Mutation.SendConfirmationCode == nil {
			break
		}

		args, err := ec.field_Mutation_sendConfirmationCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendConfirmationCode(childComplexity, args["input"].(SendConfirmationCodeInput)), true

	case "Mutation.verifyConfirmationCode":
		if e.complexity.Mutation.VerifyConfirmationCode == nil {
			break
		}

		args, err := ec.field_Mutation_verifyConfirmationCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyConfirmationCode(childComplexity, args["input"].(VerifyConfirmationCodeInput)), true

	case "Query._dummy":
		if e.complexity.Query.Dummy == nil {
			break
		}

		return e.complexity.Query.Dummy(childComplexity), true

	case "SecurityImagePayload.image":
		if e.complexity.SecurityImagePayload.Image == nil {
			break
		}

		return e.complexity.SecurityImagePayload.Image(childComplexity), true

	case "SecurityImagePayload.phrase":
		if e.complexity.SecurityImagePayload.Phrase == nil {
			break
		}

		return e.complexity.SecurityImagePayload.Phrase(childComplexity), true

	case "VoidPayload.ok":
		if e.complexity.VoidPayload.Ok == nil {
			break
		}

		return e.complexity.VoidPayload.Ok(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputProcessFirebaseAuthInput,
		ec.unmarshalInputSecurityImageInput,
		ec.unmarshalInputSendConfirmationCodeInput,
		ec.unmarshalInputVerifyConfirmationCodeInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/auth.graphql", Input: `# ─────────────────────────────
# Enum
# ─────────────────────────────

enum DeliveryMethod {
  EMAIL
}

# ─────────────────────────────
# Input types
# ─────────────────────────────

input SendConfirmationCodeInput {
  method: DeliveryMethod!
  recipient: String!
}

input VerifyConfirmationCodeInput {
  recipient: String!
  code: String!
}

input SecurityImageInput {
  email: String!
}

type SecurityImagePayload {
  image: String!
  phrase: String!
}

input ProcessFirebaseAuthInput {
  token: String!
}

# ─────────────────────────────
# Query
# ─────────────────────────────

type Query {
  _dummy: String
}

# ─────────────────────────────
# Mutation fields
# ─────────────────────────────

extend type Mutation {
  sendConfirmationCode(input: SendConfirmationCodeInput!): VoidPayload!
  verifyConfirmationCode(input: VerifyConfirmationCodeInput!): VoidPayload!
  securityImage(input: SecurityImageInput!):SecurityImagePayload!
  processFirebaseAuth(input: ProcessFirebaseAuthInput!): VoidPayload!
}
`, BuiltIn: false},
	{Name: "../schema/common.graphql", Input: `# ─────────────────────────────
# Directive mutation and query options
# ─────────────────────────────

directive @requirePermission(permission: String!) on FIELD_DEFINITION

# ─────────────────────────────
# Common types
# ─────────────────────────────

type VoidPayload {
  ok: Boolean
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

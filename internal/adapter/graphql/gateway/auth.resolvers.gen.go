package gateway

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
)

// SendConfirmationCode is the resolver for the sendConfirmationCode field.
func (r *mutationResolver) SendConfirmationCode(ctx context.Context, input SendConfirmationCodeInput) (*SendConfirmationCodePayload, error) {
	panic(fmt.Errorf("not implemented: SendConfirmationCode - sendConfirmationCode"))
}

// VerifyConfirmationCode is the resolver for the verifyConfirmationCode field.
func (r *mutationResolver) VerifyConfirmationCode(ctx context.Context, input VerifyConfirmationCodeInput) (*VerifyConfirmationCodePayload, error) {
	panic(fmt.Errorf("not implemented: VerifyConfirmationCode - verifyConfirmationCode"))
}

// SaveSecurityImage is the resolver for the saveSecurityImage field.
func (r *mutationResolver) SaveSecurityImage(ctx context.Context, input SaveSecurityImageInput) (*SaveSecurityImagePayload, error) {
	panic(fmt.Errorf("not implemented: SaveSecurityImage - saveSecurityImage"))
}

// GetSecurityImage is the resolver for the getSecurityImage field.
func (r *mutationResolver) GetSecurityImage(ctx context.Context, input GetSecurityImageInput) (*GetSecurityImagePayload, error) {
	panic(fmt.Errorf("not implemented: GetSecurityImage - getSecurityImage"))
}

// ProcessAuthToken is the resolver for the processAuthToken field.
func (r *mutationResolver) ProcessAuthToken(ctx context.Context, input ProcessAuthTokenInput) (*ProcessAuthTokenPayload, error) {
	panic(fmt.Errorf("not implemented: ProcessAuthToken - processAuthToken"))
}

// Dummy is the resolver for the _dummy field.
func (r *queryResolver) Dummy(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Dummy - _dummy"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)

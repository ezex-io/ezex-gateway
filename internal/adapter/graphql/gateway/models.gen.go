// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gateway

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type GetSecurityImageInput struct {
	Email string `json:"email"`
}

type GetSecurityImagePayload struct {
	Email          string `json:"email"`
	SecurityImage  string `json:"security_image"`
	SecurityPhrase string `json:"security_phrase"`
}

type Mutation struct {
}

type ProcessAuthTokenInput struct {
	IDToken string `json:"id_token"`
}

type ProcessAuthTokenPayload struct {
	UserID string `json:"user_id"`
}

type Query struct {
}

type SaveSecurityImageInput struct {
	Email          string `json:"email"`
	SecurityImage  string `json:"security_image"`
	SecurityPhrase string `json:"security_phrase"`
}

type SaveSecurityImagePayload struct {
	Email string `json:"email"`
}

type SendConfirmationCodeInput struct {
	Method    DeliveryMethod `json:"method"`
	Recipient string         `json:"recipient"`
}

type SendConfirmationCodePayload struct {
	Recipient string `json:"recipient"`
}

type VerifyConfirmationCodeInput struct {
	Recipient string `json:"recipient"`
	Code      string `json:"code"`
}

type VerifyConfirmationCodePayload struct {
	Recipient string `json:"recipient"`
}

type VoidPayload struct {
	Ok *bool `json:"ok,omitempty"`
}

type DeliveryMethod string

const (
	DeliveryMethodEmail DeliveryMethod = "EMAIL"
)

var AllDeliveryMethod = []DeliveryMethod{
	DeliveryMethodEmail,
}

func (e DeliveryMethod) IsValid() bool {
	switch e {
	case DeliveryMethodEmail:
		return true
	}
	return false
}

func (e DeliveryMethod) String() string {
	return string(e)
}

func (e *DeliveryMethod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryMethod", str)
	}
	return nil
}

func (e DeliveryMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DeliveryMethod) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DeliveryMethod) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

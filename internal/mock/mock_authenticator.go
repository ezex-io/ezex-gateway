// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/port/authenticator.go
//
// Generated by this command:
//
//	mockgen -source=./internal/port/authenticator.go -destination=./internal/mock/mock_authenticator.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	port "github.com/ezex-io/ezex-gateway/internal/port"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticatorPort is a mock of AuthenticatorPort interface.
type MockAuthenticatorPort struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorPortMockRecorder
	isgomock struct{}
}

// MockAuthenticatorPortMockRecorder is the mock recorder for MockAuthenticatorPort.
type MockAuthenticatorPortMockRecorder struct {
	mock *MockAuthenticatorPort
}

// NewMockAuthenticatorPort creates a new mock instance.
func NewMockAuthenticatorPort(ctrl *gomock.Controller) *MockAuthenticatorPort {
	mock := &MockAuthenticatorPort{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticatorPort) EXPECT() *MockAuthenticatorPortMockRecorder {
	return m.recorder
}

// VerifyIDToken mocks base method.
func (m *MockAuthenticatorPort) VerifyIDToken(ctx context.Context, req *port.VerifyIDTokenRequest) (*port.VerifyIDTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", ctx, req)
	ret0, _ := ret[0].(*port.VerifyIDTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockAuthenticatorPortMockRecorder) VerifyIDToken(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockAuthenticatorPort)(nil).VerifyIDToken), ctx, req)
}

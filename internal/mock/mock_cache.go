// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/port/cache.go
//
// Generated by this command:
//
//	mockgen -source=./internal/port/cache.go -destination=./internal/mock/mock_cache.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	port "github.com/ezex-io/ezex-gateway/internal/port"
	gomock "go.uber.org/mock/gomock"
)

// MockCachePort is a mock of CachePort interface.
type MockCachePort struct {
	ctrl     *gomock.Controller
	recorder *MockCachePortMockRecorder
	isgomock struct{}
}

// MockCachePortMockRecorder is the mock recorder for MockCachePort.
type MockCachePortMockRecorder struct {
	mock *MockCachePort
}

// NewMockCachePort creates a new mock instance.
func NewMockCachePort(ctrl *gomock.Controller) *MockCachePort {
	mock := &MockCachePort{ctrl: ctrl}
	mock.recorder = &MockCachePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachePort) EXPECT() *MockCachePortMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockCachePort) Del(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockCachePortMockRecorder) Del(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCachePort)(nil).Del), varargs...)
}

// Exists mocks base method.
func (m *MockCachePort) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockCachePortMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCachePort)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockCachePort) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCachePortMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCachePort)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockCachePort) Set(ctx context.Context, key, value string, opts ...port.CacheOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCachePortMockRecorder) Set(ctx, key, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCachePort)(nil).Set), varargs...)
}

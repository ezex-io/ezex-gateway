// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/port/notification.go
//
// Generated by this command:
//
//	mockgen -source=./internal/port/notification.go -destination=./internal/mock/mock_notification.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	port "github.com/ezex-io/ezex-gateway/internal/port"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationPort is a mock of NotificationPort interface.
type MockNotificationPort struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationPortMockRecorder
	isgomock struct{}
}

// MockNotificationPortMockRecorder is the mock recorder for MockNotificationPort.
type MockNotificationPortMockRecorder struct {
	mock *MockNotificationPort
}

// NewMockNotificationPort creates a new mock instance.
func NewMockNotificationPort(ctrl *gomock.Controller) *MockNotificationPort {
	mock := &MockNotificationPort{ctrl: ctrl}
	mock.recorder = &MockNotificationPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationPort) EXPECT() *MockNotificationPortMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockNotificationPort) SendEmail(ctx context.Context, req *port.SendEmailRequest) (*port.SendEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, req)
	ret0, _ := ret[0].(*port.SendEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockNotificationPortMockRecorder) SendEmail(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockNotificationPort)(nil).SendEmail), ctx, req)
}

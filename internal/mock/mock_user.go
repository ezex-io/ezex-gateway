// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/port/user.go
//
// Generated by this command:
//
//	mockgen -source=./internal/port/user.go -destination=./internal/mock/mock_user.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	port "github.com/ezex-io/ezex-gateway/internal/port"
	gomock "go.uber.org/mock/gomock"
)

// MockUserPort is a mock of UserPort interface.
type MockUserPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserPortMockRecorder
	isgomock struct{}
}

// MockUserPortMockRecorder is the mock recorder for MockUserPort.
type MockUserPortMockRecorder struct {
	mock *MockUserPort
}

// NewMockUserPort creates a new mock instance.
func NewMockUserPort(ctrl *gomock.Controller) *MockUserPort {
	mock := &MockUserPort{ctrl: ctrl}
	mock.recorder = &MockUserPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPort) EXPECT() *MockUserPortMockRecorder {
	return m.recorder
}

// GetSecurityImage mocks base method.
func (m *MockUserPort) GetSecurityImage(ctx context.Context, req *port.GetSecurityImageRequest) (*port.GetSecurityImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityImage", ctx, req)
	ret0, _ := ret[0].(*port.GetSecurityImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityImage indicates an expected call of GetSecurityImage.
func (mr *MockUserPortMockRecorder) GetSecurityImage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityImage", reflect.TypeOf((*MockUserPort)(nil).GetSecurityImage), ctx, req)
}

// ProcessLogin mocks base method.
func (m *MockUserPort) ProcessLogin(ctx context.Context, req *port.ProcessLoginRequest) (*port.ProcessLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLogin", ctx, req)
	ret0, _ := ret[0].(*port.ProcessLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessLogin indicates an expected call of ProcessLogin.
func (mr *MockUserPortMockRecorder) ProcessLogin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLogin", reflect.TypeOf((*MockUserPort)(nil).ProcessLogin), ctx, req)
}

// SaveSecurityImage mocks base method.
func (m *MockUserPort) SaveSecurityImage(ctx context.Context, req *port.SaveSecurityImageRequest) (*port.SaveSecurityImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecurityImage", ctx, req)
	ret0, _ := ret[0].(*port.SaveSecurityImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSecurityImage indicates an expected call of SaveSecurityImage.
func (mr *MockUserPortMockRecorder) SaveSecurityImage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecurityImage", reflect.TypeOf((*MockUserPort)(nil).SaveSecurityImage), ctx, req)
}

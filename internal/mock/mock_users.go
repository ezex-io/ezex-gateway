// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/port/users.go
//
// Generated by this command:
//
//	mockgen -source=./internal/port/users.go -destination=./internal/mock/mock_users.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	users "github.com/ezex-io/ezex-proto/go/users"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersPort is a mock of UsersPort interface.
type MockUsersPort struct {
	ctrl     *gomock.Controller
	recorder *MockUsersPortMockRecorder
	isgomock struct{}
}

// MockUsersPortMockRecorder is the mock recorder for MockUsersPort.
type MockUsersPortMockRecorder struct {
	mock *MockUsersPort
}

// NewMockUsersPort creates a new mock instance.
func NewMockUsersPort(ctrl *gomock.Controller) *MockUsersPort {
	mock := &MockUsersPort{ctrl: ctrl}
	mock.recorder = &MockUsersPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersPort) EXPECT() *MockUsersPortMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUsersPort) CreateUser(ctx context.Context, req *users.CreateUserRequest) (*users.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*users.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersPortMockRecorder) CreateUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersPort)(nil).CreateUser), ctx, req)
}

// GetSecurityImage mocks base method.
func (m *MockUsersPort) GetSecurityImage(ctx context.Context, req *users.GetSecurityImageRequest) (*users.GetSecurityImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityImage", ctx, req)
	ret0, _ := ret[0].(*users.GetSecurityImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityImage indicates an expected call of GetSecurityImage.
func (mr *MockUsersPortMockRecorder) GetSecurityImage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityImage", reflect.TypeOf((*MockUsersPort)(nil).GetSecurityImage), ctx, req)
}

// GetUserByEmail mocks base method.
func (m *MockUsersPort) GetUserByEmail(ctx context.Context, req *users.GetUserByEmailRequest) (*users.GetUserByEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, req)
	ret0, _ := ret[0].(*users.GetUserByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUsersPortMockRecorder) GetUserByEmail(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUsersPort)(nil).GetUserByEmail), ctx, req)
}

// SaveSecurityImage mocks base method.
func (m *MockUsersPort) SaveSecurityImage(ctx context.Context, req *users.SaveSecurityImageRequest) (*users.SaveSecurityImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecurityImage", ctx, req)
	ret0, _ := ret[0].(*users.SaveSecurityImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSecurityImage indicates an expected call of SaveSecurityImage.
func (mr *MockUsersPortMockRecorder) SaveSecurityImage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecurityImage", reflect.TypeOf((*MockUsersPort)(nil).SaveSecurityImage), ctx, req)
}
